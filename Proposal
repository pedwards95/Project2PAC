Our web api would function as a hub for web-based games, providing the games as a separate connected web service. For a new user, they would need to create an account and input any related information. A username and a password is required, however they can also include a small blurb about themself, and a profile picture. For a typical user, they can log in, and are taken to the main hub, where they can see a notification board, as well as select any of the games offered. If, for example, the game they wish to play was a version of 'Snake', they would play until the game's completion and then be taken back to the main hub. The user can see the notification board at any time. This Hub Board keeps track of recent events, such as recent (new) all-time high scores, events or competition announcements, upcoming games, and more. Administrators are able to create some of these notifications, but the majority are created automatically when someone does well in a game.
For any selected game, a user is able to see the general ratings, other people's comments about them, as well as a scoreboard displaying the top 10 scores for a selected game. Outside of the games, users can look up the personal best scores of their friends and enemies, and see any reviews that they posted. They can post their own reviews of games as well, and if later they decide they were a bit too harsh, can go back and edit or delete their post.
There is also a planned chat feature where users can talk in a general chat, and challenge familiar faces to beat their new top scores. This chat provides the user with interaction and competition, and will be a key part to future multiplayer implementations. If time and technology allows, we would want to include these multiplayer features, where two users can play and chat against each other, but this is currently a reach goal.
The database would handle the storage of users and their profile information, a user's personal best scores in the games that they have played, as well as any reviews that people have posted about a game. Another table would store the notifications from the Hub Board, making references to users and their scores, and keeping persistent for every user. A MVP would only need one game, however it can be very easily scaled into a large bank of games. Our currently planned game is a memory-bingo game, utilizing definitions and keywords from C# and programming in general in a randomized format, pulled from a bank kept online. Questions/definitions would have a difficulty rating, and would progressively get harder until the player is no longer able to fill their bingo card.
New to this proposal:
- More information related to the user
- More extensive user stories
- A general and persistent notice board
- The MVP game is a memory-matching game that incorporates some logic, and a databank